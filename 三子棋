三子棋.c
#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include "game.h"    //引自己的函数的头文件用""

void menu()     //菜单
{
	printf("************************\n");
	printf("***  1.play  0.exit  ***\n");
	printf("************************\n");
}

void game()  //游戏的算法实现
{
	char ret = 0;//用来接收判断函数返回的信息

	//创建数组-存放玩家的的棋盘信息
	char board[ROW][COL] = { 0 };//棋盘
	//初始化棋盘
	InitBoard(board, ROW, COL);//使棋盘全部空格-函数
	//打印棋盘函数
	DisplayBoard(board,ROW,COL);

	//打印这样的棋盘
//          |  |  
//        --|--|--
//          |  |
//        --|--|--   
//          |  |
	//下棋
	while (1)
	{
		//玩家下棋--操作数组
		PlayerMove(board,ROW,COL);
		DisplayBoard(board, ROW, COL);   //打印一下
	    //判断玩家是否赢了
		ret = IsWin(board,ROW,COL);
		if (ret != 'C')
		{
			break;
		}

		//电脑下棋
		ComputerMove(board, ROW, COL);
		DisplayBoard(board, ROW, COL);  //打印一下
		//判断电脑是否赢
		ret = IsWin(board,ROW,COL);
		if (ret != 'C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢\n");
	}
	else
	{
		printf("平局\n");
	}
}

void test()  //游戏选择
{
	int input = 0;
	srand((unsigned int)time(NULL));//时间戳作为生成起点
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择失误，请重新选择\n");
			break;
		}
	} while (input);
}

int main()
{
	test();
	return 0;
}

game.c//函数主体
#define _CRT_SECURE_NO_WARNINGS 1

#include "game.h"  


//棋盘初始化函数的实现
void InitBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}


//棋盘打印函数的实现
//          |  |  
//        --|--|--
//          |  |
//        --|--|--   
//          |  |


//代码较挫，如果改成4*4的话，只有三列
      /*
void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		//1.打印一行的数据      列的打印固定
		printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
		//2.打印分割行
		if (i < row - 1)  //不打印最后一行
		{
			printf("---|---|---\n");
		}
	
	}
}     */

//优化版
void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		//1.打印一行的数据      
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		//2.打印分割行
		if (i < row - 1)  
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)    //不打印最后一行
					printf("|");
			}
			printf("\n");
		}

	}
}


//玩家下棋函数实现
void PlayerMove(char board[ROW][COL], int row, int col)
{
	int x, y;
	printf("玩家走:>\n");
	while (1)
	{
		printf("请输入要下的坐标:>");
		scanf("%d%d", &x, &y);
		//判断xy坐标的合理性
		if (x >= 1 && x <= row&&y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')//如果合理
			{
				board[x - 1][y - 1] = '*';//则在该坐标下个*
				break;          //下完了跳出去
			}
			else
			{
				printf("该坐标被占用");//如果该坐标已被占用，提示！
			}
		}
		else
		{
			printf("坐标非法，请重新输入！\n");
		}

	}
}

void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x, y;
	printf("电脑走:>\n");
	while (1)
	{
		x = rand() % row;   //x,y,生成俩个随机数
		y = rand() % col;   //作为电脑走的坐标
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
		else
			continue;
	}
}


//判断棋盘是否满了
//返回1表示满了
//返回0表示没满
int IsFull(char board[ROW][COL], int row, int col)
{
	int i, j;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;    //没满
			}
		}
	}
	return 1;     //满了
}


char IsWin(char board[ROW][COL], int row, int col)  //判断输赢函数
{
	int i = 0;
	for (i = 0; i < row; i++)//横三行判断
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
		{
			return board[i][1];
		}
	}
	for (i = 0; i < col; i++)  //竖三行判断
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		{
			return board[1][i];
		}
	}
	
	//俩个对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
		return board[1][1];
	
	//判断是否平局
	if (1 == IsFull(board, ROW, COL))   //IsFull函数--判断棋盘是否占满，平局
	{
		return 'Q';
	}
	else
		return 'C';
}

game.h   //函数声明
#define ROW 3
#define COL 3

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//函数声明
void InitBoard(char board[ROW][COL], int row, int col);

void DisplayBoard(char board[ROW][COL], int row, int col);

void PlayerMove(char board[ROW][COL], int row, int col);

void ComputerMove(char board[ROW][COL], int row, int col);

//告诉我们四种状态
//玩家赢----'*'
//电脑赢----'#'
//平局------'Q'
//继续------'C'

char IsWin(char board[ROW][COL], int row, int col);
